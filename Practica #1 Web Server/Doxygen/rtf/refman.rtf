{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033
{\fonttbl {\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}
{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}
{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}
}
{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}
{\stylesheet
{\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}
{\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid \sbasedon0 \snext0 heading 1;}
{\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 2;}
{\s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid \sbasedon0 \snext0 heading 3;}
{\s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 4;}{\*\cs10 \additive Default Paragraph Font;}
{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext0 heading 5;}{\*\cs10 \additive Default Paragraph Font;}
{\s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid \sbasedon0 \snext15 Title;}
{\s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid \sbasedon0 \snext16 Subtitle;}
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid \sbasedon0 \snext17 BodyText;}
{\s18\widctlpar\fs22\cgrid \sbasedon0 \snext18 DenseText;}
{\s28\widctlpar\tqc\tx4320\tqr\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext28 header;}
{\s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid \sbasedon0 \snext29 footer;}
{\s30\li360\sa60\sb120\keepn\widctlpar\adjustright \b\f1\fs20\cgrid \sbasedon0 \snext30 GroupHeader;}
{\s40\li0\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext41 Code Example 0;}
{\s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext42 Code Example 1;}
{\s42\li720\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext43 Code Example 2;}
{\s43\li1080\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext44 Code Example 3;}
{\s44\li1440\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext45 Code Example 4;}
{\s45\li1800\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext46 Code Example 5;}
{\s46\li2160\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext47 Code Example 6;}
{\s47\li2520\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext48 Code Example 7;}
{\s48\li2880\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 8;}
{\s49\li3240\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid \sbasedon0 \snext49 Code Example 9;}
{\s50\li0\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext51 List Continue 0;}
{\s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext52 List Continue 1;}
{\s52\li720\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext53 List Continue 2;}
{\s53\li1080\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext54 List Continue 3;}
{\s54\li1440\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext55 List Continue 4;}
{\s55\li1800\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext56 List Continue 5;}
{\s56\li2160\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext57 List Continue 6;}
{\s57\li2520\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext58 List Continue 7;}
{\s58\li2880\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 8;}
{\s59\li3240\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid \sbasedon0 \snext59 List Continue 9;}
{\s60\li0\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext61 DescContinue 0;}
{\s61\li360\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext62 DescContinue 1;}
{\s62\li720\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext63 DescContinue 2;}
{\s63\li1080\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext64 DescContinue 3;}
{\s64\li1440\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext65 DescContinue 4;}
{\s65\li1800\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext66 DescContinue 5;}
{\s66\li2160\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext67 DescContinue 6;}
{\s67\li2520\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext68 DescContinue 7;}
{\s68\li2880\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 8;}
{\s69\li3240\widctlpar\ql\adjustright \fs20\cgrid \sbasedon0 \snext69 DescContinue 9;}
{\s70\li0\sa30\sb30\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext81 LatexTOC 0;}
{\s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext82 LatexTOC 1;}
{\s72\li720\sa24\sb24\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext83 LatexTOC 2;}
{\s73\li1080\sa21\sb21\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext84 LatexTOC 3;}
{\s74\li1440\sa18\sb18\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext85 LatexTOC 4;}
{\s75\li1800\sa15\sb15\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext86 LatexTOC 5;}
{\s76\li2160\sa12\sb12\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext87 LatexTOC 6;}
{\s77\li2520\sa9\sb9\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext88 LatexTOC 7;}
{\s78\li2880\sa6\sb6\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 8;}
{\s79\li3240\sa3\sb3\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid \sbasedon0 \snext89 LatexTOC 9;}
{\s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid \sbasedon0 \snext81 \sautoupd List Bullet 0;}
{\s81\fi-360\li720\widctlpar\jclisttab\tx720{\*\pn \pnlvlbody\ilvl0\ls2\pnrnot0\pndec }\ls2\adjustright \fs20\cgrid \sbasedon0 \snext82 \sautoupd List Bullet 1;}
{\s82\fi-360\li1080\widctlpar\jclisttab\tx1080{\*\pn \pnlvlbody\ilvl0\ls3\pnrnot0\pndec }\ls3\adjustright \fs20\cgrid \sbasedon0 \snext83 \sautoupd List Bullet 2;}
{\s83\fi-360\li1440\widctlpar\jclisttab\tx1440{\*\pn \pnlvlbody\ilvl0\ls4\pnrnot0\pndec }\ls4\adjustright \fs20\cgrid \sbasedon0 \snext84 \sautoupd List Bullet 3;}
{\s84\fi-360\li1800\widctlpar\jclisttab\tx1800{\*\pn \pnlvlbody\ilvl0\ls5\pnrnot0\pndec }\ls5\adjustright \fs20\cgrid \sbasedon0 \snext85 \sautoupd List Bullet 4;}
{\s85\fi-360\li2160\widctlpar\jclisttab\tx2160{\*\pn \pnlvlbody\ilvl0\ls6\pnrnot0\pndec }\ls6\adjustright \fs20\cgrid \sbasedon0 \snext86 \sautoupd List Bullet 5;}
{\s86\fi-360\li2520\widctlpar\jclisttab\tx2520{\*\pn \pnlvlbody\ilvl0\ls7\pnrnot0\pndec }\ls7\adjustright \fs20\cgrid \sbasedon0 \snext87 \sautoupd List Bullet 6;}
{\s87\fi-360\li2880\widctlpar\jclisttab\tx2880{\*\pn \pnlvlbody\ilvl0\ls8\pnrnot0\pndec }\ls8\adjustright \fs20\cgrid \sbasedon0 \snext88 \sautoupd List Bullet 7;}
{\s88\fi-360\li3240\widctlpar\jclisttab\tx3240{\*\pn \pnlvlbody\ilvl0\ls9\pnrnot0\pndec }\ls9\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 8;}
{\s89\fi-360\li3600\widctlpar\jclisttab\tx3600{\*\pn \pnlvlbody\ilvl0\ls10\pnrnot0\pndec }\ls10\adjustright \fs20\cgrid \sbasedon0 \snext89 \sautoupd List Bullet 9;}
{\s90\fi-360\li360\widctlpar\fs20\cgrid \sbasedon0 \snext91 \sautoupd List Enum 0;}
{\s91\fi-360\li720\widctlpar\fs20\cgrid \sbasedon0 \snext92 \sautoupd List Enum 1;}
{\s92\fi-360\li1080\widctlpar\fs20\cgrid \sbasedon0 \snext93 \sautoupd List Enum 2;}
{\s93\fi-360\li1440\widctlpar\fs20\cgrid \sbasedon0 \snext94 \sautoupd List Enum 3;}
{\s94\fi-360\li1800\widctlpar\fs20\cgrid \sbasedon0 \snext95 \sautoupd List Enum 4;}
{\s95\fi-360\li2160\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s96\fi-360\li2520\widctlpar\fs20\cgrid \sbasedon0 \snext96 \sautoupd List Enum 5;}
{\s97\fi-360\li2880\widctlpar\fs20\cgrid \sbasedon0 \snext98 \sautoupd List Enum 7;}
{\s98\fi-360\li3240\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 8;}
{\s99\fi-360\li3600\widctlpar\fs20\cgrid \sbasedon0 \snext99 \sautoupd List Enum 9;}
}
{\comment begin body}
{\info 
{\title {\comment Practica #1  {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
1 \par
}}Practica #1}
{\comment Generated byDoxgyen. }
{\creatim \yr2014\mo3\dy2\hr17\min29\sec14}
}\pard\plain 
\sectd\pgnlcrm
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\vertalc\qc\par\par\par\par\par\par\par
\pard\plain \s15\qc\sb240\sa60\widctlpar\outlinelevel0\adjustright \b\f1\fs32\kerning28\cgrid 
{\field\fldedit {\*\fldinst TITLE \\*MERGEFORMAT}{\fldrslt TITLE}}\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
\par
\par\par\par\par\par\par\par\par\par\par\par\par
\pard\plain \s16\qc\sa60\widctlpar\outlinelevel1\adjustright \f1\cgrid 
{\field\fldedit {\*\fldinst AUTHOR \\*MERGEFORMAT}{\fldrslt AUTHOR}}\par
Version 1\par{\field\fldedit {\*\fldinst CREATEDATE \\*MERGEFORMAT}{\fldrslt CREATEDATE}}\par
\page\page\vertalt
\pard\plain 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Table of Contents\par
\pard\plain \par
{\field\fldedit {\*\fldinst TOC \\f \\*MERGEFORMAT}{\fldrslt Table of contents}}\par
\pard\plain 
\sect \sbkpage \pgndec \pgnrestart
\sect \sectd \sbknone
{\footer \s29\widctlpar\tqc\tx4320\tqr\tx8640\qr\adjustright \fs20\cgrid {\chpgn}}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Index\par \pard\plain 
{\tc \v File Index}
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
File List\par \pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid Here is a list of all files with brief descriptions:}
{
\par
\pard\plain \s71\li360\sa27\sb27\widctlpar\tqr\tldot\tx8640\adjustright \fs20\cgrid 
{\b {\b debug.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Macros para Debug })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAA \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b global.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAF \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b main.c} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAL \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b server.c} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAR \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b server.h} } \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAU \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b tcp.c} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Funciones generales para trabajar con un Socket de tipo TCP })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAAAX \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
{\b {\b tcp.h} ({\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Funciones generales para trabajar con un Socket de tipo TCP })} \tab {\field\fldedit {\*\fldinst PAGEREF AAAAAAAABG \\*MERGEFORMAT}{\fldrslt pagenum}}
\par
\par}
\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
File Documentation{\tc \v File Documentation}
\par \pard\plain 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
debug.h File Reference\par \pard\plain 
{\tc\tcl2 \v debug.h}
{\xe \v debug.h}
{\bkmkstart AAAAAAAAAA}
{\bkmkend AAAAAAAAAA}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Macros para Debug. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <stdio.h>}\par
{\f2 #include <stdarg.h>}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b debug_print}(level, fmt, line,...)\~ fprintf(stderr, "[%i] %s:%d %s(): " fmt "\\n",level, __FILE__,line,__FUNCTION__,##__VA_ARGS__)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b debug}(level, _fmt,...)\~ if({\b debugLevel} >= level) {\b debug_print}(level,_fmt,__LINE__,##__VA_ARGS__)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b error}(errnum, str)\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b debugLevel}\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Macros para Debug. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Macros para DEBUG\par
Alvaro Parres ({\f2 aparres@gmail.com}) \par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Febrero 2011 \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Version:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid 0.0.1 \par
}}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v debug\:debug.h}
{\xe \v debug.h\:debug}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define debug( level,  _fmt,  {\i ...})\~ if({\b debugLevel} >= level) {\b debug_print}(level,_fmt,__LINE__,##__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAAB}
{\bkmkend AAAAAAAAAB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v debug_print\:debug.h}
{\xe \v debug.h\:debug_print}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define debug_print( level,  fmt,  line,  {\i ...})\~ fprintf(stderr, "[%i] %s:%d %s(): " fmt "\\n",level, __FILE__,line,__FUNCTION__,##__VA_ARGS__)}}
\par
{\bkmkstart AAAAAAAAAC}
{\bkmkend AAAAAAAAAC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v error\:debug.h}
{\xe \v debug.h\:error}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define error( errnum,  str)}}
\par
{\bkmkstart AAAAAAAAAD}
{\bkmkend AAAAAAAAAD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\b Value:}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid if(errnum > 0) \{ fprintf(stderr,"%s:%d ERROR: %s(%s)\\n",__FILE__,__LINE__,str,strerror(errnum)); \} \\\par
        else \{ fprintf(stderr,"%s:%d ERROR: %s\\n",__FILE__,__LINE__,str); \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v debugLevel\:debug.h}
{\xe \v debug.h\:debugLevel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int debugLevel}}
\par
{\bkmkstart AAAAAAAAAE}
{\bkmkend AAAAAAAAAE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
global.h File Reference\par \pard\plain 
{\tc\tcl2 \v global.h}
{\xe \v global.h}
{\bkmkstart AAAAAAAAAF}
{\bkmkend AAAAAAAAAF}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b TRUE}\~ 1\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b FALSE}\~ 0\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b CONFIG_DEFAULT_PORT}\~ 8080\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MINPORT}\~ 1\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b MAXPORT}\~ 65000\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v CONFIG_DEFAULT_PORT\:global.h}
{\xe \v global.h\:CONFIG_DEFAULT_PORT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define CONFIG_DEFAULT_PORT\~ 8080}}
\par
{\bkmkstart AAAAAAAAAG}
{\bkmkend AAAAAAAAAG}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v FALSE\:global.h}
{\xe \v global.h\:FALSE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define FALSE\~ 0}}
\par
{\bkmkstart AAAAAAAAAH}
{\bkmkend AAAAAAAAAH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MAXPORT\:global.h}
{\xe \v global.h\:MAXPORT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MAXPORT\~ 65000}}
\par
{\bkmkstart AAAAAAAAAI}
{\bkmkend AAAAAAAAAI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v MINPORT\:global.h}
{\xe \v global.h\:MINPORT}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define MINPORT\~ 1}}
\par
{\bkmkstart AAAAAAAAAJ}
{\bkmkend AAAAAAAAAJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v TRUE\:global.h}
{\xe \v global.h\:TRUE}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define TRUE\~ 1}}
\par
{\bkmkstart AAAAAAAAAK}
{\bkmkend AAAAAAAAAK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
main.c File Reference\par \pard\plain 
{\tc\tcl2 \v main.c}
{\xe \v main.c}
{\bkmkstart AAAAAAAAAL}
{\bkmkend AAAAAAAAAL}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <stdio.h>}\par
{\f2 #include <string.h>}\par
{\f2 #include <stdlib.h>}\par
{\f2 #include <inttypes.h>}\par
{\f2 #include "global.h"}\par
{\f2 #include "debug.h"}\par
{\f2 #include "server.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b processArgs} (int argc, char *argv[])\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b printHelp} (int is_error, char *cmd, char *{\b error})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b main} (int argc, char *argv[])\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variables\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
unsigned int {\b port} = {\b CONFIG_DEFAULT_PORT}\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b debugLevel} = 0\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v main\:main.c}
{\xe \v main.c\:main}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int main (int {\i argc}, char * {\i argv}[])}}
\par
{\bkmkstart AAAAAAAAAM}
{\bkmkend AAAAAAAAAM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 22                                  \{\par
23 \par
24     printf(".:: Practica Web Server ::.\\n");\par
25     if(!processArgs(argc, argv)) \{\par
26         return 1;\par
27     \}\par
28     \par
29     debug(2,"Puerto: %u",port);\par
30     startServer(port);\par
31         \par
32     return 0;\par
33 \}\par
}
}
{\xe \v printHelp\:main.c}
{\xe \v main.c\:printHelp}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void printHelp (int {\i is_error}, char * {\i cmd}, char * {\i error})}}
\par
{\bkmkstart AAAAAAAAAN}
{\bkmkend AAAAAAAAAN}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 66                                                      \{\par
67     \par
68     if(is_error) \{\par
69         printf("Error: %s\\n",error);\par
70     \}\par
71         \par
72     printf("USE:\\t%s [OPTIONS]\\n",cmd);\par
73     printf("\\nOPCIONES:\\n");\par
74     printf("\\t-p\\t Numero de Puerto (Default %u)\\n",CONFIG_DEFAULT_PORT);\par
75     printf("\\t-v[vvvv]\\t Nivel de Verbosity\\n");\par
76     printf("\\n");\par
77     return;\par
78 \}}
}
{\xe \v processArgs\:main.c}
{\xe \v main.c\:processArgs}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int processArgs (int {\i argc}, char * {\i argv}[])}}
\par
{\bkmkstart AAAAAAAAAO}
{\bkmkend AAAAAAAAAO}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Web Server \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 35                                         \{\par
36     \par
37     int i;\par
38     unsigned int temp;\par
39         \par
40     for(i=1; i < argc; i++) \{\par
41         \par
42         if(strcmp(argv[i],"-p")==0) \{\par
43             temp = strtoimax(argv[++i], NULL, 10);\par
44             if(temp == 0 || temp < MINPORT || temp > MAXPORT) \{\par
45                 printHelp(TRUE,argv[0],"Puerto fuera de rango\\n");\par
46                 return FALSE;\par
47             \}\par
48             port = temp;\par
49         \}\par
50 \par
51         else if(strstr(argv[i],"-v")!=NULL) \{\par
52             debugLevel = strlen(argv[i])-1;\par
53         \}\par
54         \par
55         else \{\par
56             printHelp(TRUE ,argv[0],"Opci\'C3\'B3n no valida\\n");\par
57             return FALSE;\par
58         \}\par
59         \par
60     \}\par
61     \par
62     return TRUE;\par
63 \}\par
}
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Variable Documentation\par
\pard\plain 
{\xe \v debugLevel\:main.c}
{\xe \v main.c\:debugLevel}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int debugLevel = 0}}
\par
{\bkmkstart AAAAAAAAAP}
{\bkmkend AAAAAAAAAP}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v port\:main.c}
{\xe \v main.c\:port}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
unsigned int port = {\b CONFIG_DEFAULT_PORT}}}
\par
{\bkmkstart AAAAAAAAAQ}
{\bkmkend AAAAAAAAAQ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
server.c File Reference\par \pard\plain 
{\tc\tcl2 \v server.c}
{\xe \v server.c}
{\bkmkstart AAAAAAAAAR}
{\bkmkend AAAAAAAAAR}
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <unistd.h>}\par
{\f2 #include <stdlib.h>}\par
{\f2 #include <string.h>}\par
{\f2 #include <fcntl.h>}\par
{\f2 #include <stdio.h>}\par
{\f2 #include <sys/stat.h>}\par
{\f2 #include "server.h"}\par
{\f2 #include "tcp.h"}\par
{\f2 #include "debug.h"}\par
{\f2 #include "global.h"}\par
{\f2 #include "errno.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b clientProccess} (const int clientSocket)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b startServer} (const unsigned int {\b port})\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v clientProccess\:server.c}
{\xe \v server.c\:clientProccess}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void clientProccess (const int {\i clientSocket})}}
\par
{\bkmkstart AAAAAAAAAS}
{\bkmkend AAAAAAAAAS}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
INCLUDES \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
INICIO DEL PROCESO DEL CLIENTE\par
PROCESAR EL GET\par
RESPONDER CON 200 OK SI EXISTE\par
Fin del header de envio de archivo\par
ENVIAR EL ARCHIVO\par
CERRAMOS LA COMUNICACI\'C3\'83\'C2\'93N \par
}{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 61                                             \{\par
62     \par
63     char *buffer;\par
64     char *firstLine;\par
65     char *ptr;\par
66     char html[250];\par
67     int file;\par
68     int readBytes;\par
69     int firstFlag;\par
70     FILE *in;\par
71     FILE *out;\par
72            \par
74     debug(2,"Inicio del proceso del Cliente\\n");\par
75     \par
76     in =fdopen(clientSocket, "r");  //Lectura del Socket\par
77     out=fdopen(clientSocket, "w");  //Escritura en el Socket\par
78     buffer = calloc(255,1);\par
79     firstLine = calloc(255,1);\par
80     firstFlag = TRUE;   \par
81     \par
82     \par
83     while(fgets(buffer, 255, in)!=NULL) \{\par
84             debug(4,"%s",buffer);\par
85             if(strcmp(buffer,"\\r\\n")==0) \{\par
86                 break;\par
87             \}\par
88             if(firstFlag) \{\par
89                 strcpy(firstLine,buffer);\par
90                 firstFlag = FALSE;\par
91             \}\par
92             bzero(buffer,255);\par
93         \}\par
94 \par
97     firstLine = strtok( firstLine, " " );    \par
98     firstLine = strtok( NULL, " " );         \par
99     firstLine++;\par
100     debug(5,"REQUEST: %s\\n",firstLine);\par
101             if(strlen(firstLine)==0)\{\par
102                 file = open("archivo.html",O_RDONLY); \par
103             \}\par
104             else\{\par
105                 file = open(firstLine,O_RDONLY);\par
106             \}\par
107      \par
109         if(file == -1) \{\par
110             error(errno, "No se pudo abrir el archivo");\par
111             strcpy(html, "<html><head><title>404 NOT FOUND</title></head><body><h1>ERROR 404 NOT FOUND<h1></body></html>");\par
112             sendTCPLine4(clientSocket, html,strlen(html));\par
113             \}\par
114         else \{\par
115             strcpy(html, "HTTP/1.1 200 OK\\r\\n");\par
116             sendTCPLine4(clientSocket, html,strlen(html));\par
117 \par
118             if(strlen(firstLine)!=0)\{\par
119                 //Se envia informaciosn del archivo\par
120                 strcpy(html, "Accept-Ranges: bytes\\r\\n");\par
121                 sendTCPLine4(clientSocket, html,strlen(html));\par
122                 debug(3,"SEND: %s",html);\par
123                 strcpy(html, "Content-Length: ");\par
124                     \par
125                     //Se calcula el tama\'C3\'B1o del archivo a enviar\par
126                     struct stat *st = (struct stat *)malloc(sizeof(struct stat));          \par
127                     stat(firstLine, st);\par
128                     int size = st->st_size;\par
129                     free(st);\par
130                     ptr = (char*)malloc(255);\par
131                     sprintf(ptr, "%d", size);\par
132                     strcat (html, ptr);\par
133                     strcat (html, "\\r\\n");\par
134                 sendTCPLine4(clientSocket, html,strlen(html));\par
135                 debug(3,"SEND: %s",html);\par
136                 strcpy(html, "Content-Type: application/octet-stream\\r\\n");\par
137                 sendTCPLine4(clientSocket, html,strlen(html));\par
138             \} \par
139             \par
140             \par
142             strcpy(html, "\\r\\n");\par
143             sendTCPLine4(clientSocket, html,strlen(html));\par
144       \par
146         while((readBytes = read(file,buffer,255))>0) \{\par
147             debug(6,"readBytes: %d\\n",readBytes);\par
148             sendTCPLine4(clientSocket,buffer,readBytes);\par
149         \} \par
150     \}\par
151     \par
153     fclose(in);\par
154     fclose(out);\par
155     close(clientSocket);\par
156     free(buffer);\par
157     \par
158     return;\par
159 \}\par
}
}
{\xe \v startServer\:server.c}
{\xe \v server.c\:startServer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int startServer (const unsigned int {\i port})}}
\par
{\bkmkstart AAAAAAAAAT}
{\bkmkend AAAAAAAAAT}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 22                                          \{\par
23 \par
24     int serverSocket;\par
25     int clientSocket;\par
26     char clientIP[16];\par
27     unsigned int clientPort;\par
28     \par
29     int pid;\par
30     \par
31     serverSocket = newTCPServerSocket4("127.0.0.1",port,5);\par
32     if(serverSocket == -1) \{\par
33         error(errno,"Can't create Socket");\par
34         return FALSE;\par
35     \}\par
36     debug(4,"Server Socket Created");\par
37 \par
38     while(TRUE) \{\par
39         clientSocket = waitConnection4(serverSocket,clientIP,&clientPort);\par
40         debug(2,"Connected Client %s:%u",clientIP,clientPort);\par
41         \par
42         pid = fork();\par
43         if(pid == -1) \{\par
44             debug(0,"Can't Fork!");\par
45             close(clientSocket);\par
46             continue;\par
47         \} else if(pid == 0 ) \{\par
48             // Soy el Hijo.\par
49             clientProccess(clientSocket);\par
50         \} else if (pid > 0 ) \{\par
51             // Soy el Padre\par
52             close(clientSocket);\par
53         \}\par
54     \}\par
55 \par
56     return TRUE;\par
57     \par
58 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
server.h File Reference\par \pard\plain 
{\tc\tcl2 \v server.h}
{\xe \v server.h}
{\bkmkstart AAAAAAAAAU}
{\bkmkend AAAAAAAAAU}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macros\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
#define {\b _SERVER_H}\~ value\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b startServer} (const unsigned int {\b port})\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Macro Definition Documentation\par
\pard\plain 
{\xe \v _SERVER_H\:server.h}
{\xe \v server.h\:_SERVER_H}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
#define _SERVER_H\~ value}}
\par
{\bkmkstart AAAAAAAAAV}
{\bkmkend AAAAAAAAAV}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v startServer\:server.h}
{\xe \v server.h\:startServer}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int startServer (const unsigned int {\i port})}}
\par
{\bkmkstart AAAAAAAAAW}
{\bkmkend AAAAAAAAAW}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 22                                          \{\par
23 \par
24     int serverSocket;\par
25     int clientSocket;\par
26     char clientIP[16];\par
27     unsigned int clientPort;\par
28     \par
29     int pid;\par
30     \par
31     serverSocket = newTCPServerSocket4("127.0.0.1",port,5);\par
32     if(serverSocket == -1) \{\par
33         error(errno,"Can't create Socket");\par
34         return FALSE;\par
35     \}\par
36     debug(4,"Server Socket Created");\par
37 \par
38     while(TRUE) \{\par
39         clientSocket = waitConnection4(serverSocket,clientIP,&clientPort);\par
40         debug(2,"Connected Client %s:%u",clientIP,clientPort);\par
41         \par
42         pid = fork();\par
43         if(pid == -1) \{\par
44             debug(0,"Can't Fork!");\par
45             close(clientSocket);\par
46             continue;\par
47         \} else if(pid == 0 ) \{\par
48             // Soy el Hijo.\par
49             clientProccess(clientSocket);\par
50         \} else if (pid > 0 ) \{\par
51             // Soy el Padre\par
52             close(clientSocket);\par
53         \}\par
54     \}\par
55 \par
56     return TRUE;\par
57     \par
58 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
tcp.c File Reference\par \pard\plain 
{\tc\tcl2 \v tcp.c}
{\xe \v tcp.c}
{\bkmkstart AAAAAAAAAX}
{\bkmkend AAAAAAAAAX}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Funciones generales para trabajar con un Socket de tipo TCP. }}\par
{
\pard\plain \s18\widctlpar\fs22\cgrid {\f2 #include <stdio.h>}\par
{\f2 #include <stdarg.h>}\par
{\f2 #include <sys/socket.h>}\par
{\f2 #include <strings.h>}\par
{\f2 #include <string.h>}\par
{\f2 #include <arpa/inet.h>}\par
{\f2 #include <errno.h>}\par
{\f2 #include <unistd.h>}\par
{\f2 #include <sys/types.h>}\par
{\f2 #include "debug.h"}\par
}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b getNewTCPSocket} (int addrType)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b buildAddr4} (struct sockaddr_in *addr, const char *ip, const u_short {\b port})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b newTCPServerSocket4} (const char *ip, const unsigned short {\b port}, const int q_size)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b closeTCPSocket} (const int socketFD)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b waitConnection4} (int socket, char *clientIP, unsigned int *clientPort)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b newTCPClientSocket4} (const char *ip, const u_short {\b port})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b readTCPLine4} (const int socket, char *buffer, const unsigned int maxRead)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b sendTCPLine4} (const int socket, char *buffer, const unsigned int size)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Funciones generales para trabajar con un Socket de tipo TCP. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Alvaro Parres \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Feb/2013 \par
}}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v buildAddr4\:tcp.c}
{\xe \v tcp.c\:buildAddr4}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int buildAddr4 (struct sockaddr_in * {\i addr}, const char * {\i ip}, const u_short {\i port})}}
\par
{\bkmkstart AAAAAAAAAY}
{\bkmkend AAAAAAAAAY}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 56                                                                              \{\par
57     \par
58     int status;\par
59     int localerror;\par
60 \par
61     bzero(addr, sizeof(addr));\par
62     addr->sin_family = AF_INET;\par
63     status = inet_pton(AF_INET,ip,&(addr->sin_addr.s_addr));\par
64     if(status == 0) \{\par
65         fprintf(stderr,"Invalid IPv4 Address\\n");\par
66         return -1;\par
67     \} else if(status == -1) \{\par
68         localerror = errno;\par
69         fprintf(stderr,"Error on IP Address (%s)\\n",strerror(localerror));\par
70         return -1;\par
71     \}\par
72     \par
73     addr->sin_port = htons(port);\par
74     \par
75     return -1;  \par
76 \}\par
}
}
{\xe \v closeTCPSocket\:tcp.c}
{\xe \v tcp.c\:closeTCPSocket}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void closeTCPSocket (const int {\i socketFD})}}
\par
{\bkmkstart AAAAAAAAAZ}
{\bkmkend AAAAAAAAAZ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 78                                         \{\par
79     close(socketFD);\par
80     debug(4,"Socket(%i) closed",socketFD);\par
81     return;\par
82 \}\par
}
}
{\xe \v getNewTCPSocket\:tcp.c}
{\xe \v tcp.c\:getNewTCPSocket}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int getNewTCPSocket (int {\i addrType})}}
\par
{\bkmkstart AAAAAAAABA}
{\bkmkend AAAAAAAABA}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 84                                         \{\par
85     int socketFD;\par
86     int localerror;\par
87     \par
88     socketFD = socket(addrType,SOCK_STREAM,0);\par
89     if(socketFD == -1) \{\par
90         localerror = errno;\par
91         fprintf(stderr,"Can't create socket (%s)\\n",strerror(localerror));\par
92         return -1;\par
93     \}\par
94     \par
95     return socketFD;\par
96 \}\par
}
}
{\xe \v newTCPClientSocket4\:tcp.c}
{\xe \v tcp.c\:newTCPClientSocket4}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int newTCPClientSocket4 (const char * {\i ip}, const u_short {\i port})}}
\par
{\bkmkstart AAAAAAAABB}
{\bkmkend AAAAAAAABB}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 127                                                             \{\par
128     int clientSocket;\par
129     int status;\par
130     int localerror;\par
131     struct sockaddr_in addr;\par
132     \par
133     if(!buildAddr4(&addr,ip,port)) return -1;\par
134     \par
135     if((clientSocket = getNewTCPSocket(PF_INET))==-1) return -1;\par
136     \par
137     status = connect(clientSocket, (struct sockaddr*)&addr, sizeof(addr));\par
138     if(status == -1) \{\par
139         localerror = errno;\par
140         fprintf(stderr,"Can't connect to %s:%i (%s)",ip,port,strerror(localerror));\par
141         return -1;\par
142     \}\par
143     \par
144     debug(3,"Connected to %s:%i",ip,port);\par
145     \par
146     return clientSocket;\par
147 \}\par
}
}
{\xe \v newTCPServerSocket4\:tcp.c}
{\xe \v tcp.c\:newTCPServerSocket4}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int newTCPServerSocket4 (const char * {\i ip}, const unsigned short {\i port}, const int {\i q_size})}}
\par
{\bkmkstart AAAAAAAABC}
{\bkmkend AAAAAAAABC}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 27                                                                                      \{\par
28     int socketFD;\par
29     int status;\par
30     int localerror;\par
31     struct sockaddr_in addr;\par
32 \par
33     if(!buildAddr4(&addr,ip,port)) return -1;\par
34     \par
35     if((socketFD = getNewTCPSocket(PF_INET))==-1) return -1;\par
36     \par
37     status = bind(socketFD, (struct sockaddr*)&addr, sizeof(addr));\par
38     if(status != 0) \{\par
39         localerror = errno;\par
40         fprintf(stderr,"Error: Can't bind port %s:%i (%s)\\n",ip,port,strerror(localerror));\par
41         return -1;\par
42     \}\par
43     \par
44     status = listen(socketFD,q_size);\par
45     if(status != 0) \{\par
46         localerror = errno;\par
47         fprintf(stderr,"Error: Can't change socket mode to listen (%s)\\n",strerror(localerror));\par
48         return -1;\par
49     \}\par
50     \par
51     debug(4,"Socket on %s:%u created",ip,port);\par
52     \par
53     return socketFD;\par
54 \}\par
}
}
{\xe \v readTCPLine4\:tcp.c}
{\xe \v tcp.c\:readTCPLine4}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int readTCPLine4 (const int {\i socket}, char * {\i buffer}, const unsigned int {\i maxRead})}}
\par
{\bkmkstart AAAAAAAABD}
{\bkmkend AAAAAAAABD}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 149                                                                               \{\par
150     char *ptr;\par
151     int byte;\par
152     int readBytes;\par
153     \par
154     ptr = buffer;\par
155     readBytes = 0;\par
156     \par
157     while((byte = read(socket,ptr,1)) > 0) \{\par
158         if(*ptr == '\\n' || *ptr == '\\0') \{\par
159             break;\par
160         \}\par
161         \par
162         if(readBytes == maxRead) \{\par
163             break;\par
164         \}\par
165         \par
166         ptr++;\par
167         readBytes++;\par
168     \}\par
169     \par
170     return readBytes;\par
171 \}\par
}
}
{\xe \v sendTCPLine4\:tcp.c}
{\xe \v tcp.c\:sendTCPLine4}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int sendTCPLine4 (const int {\i socket}, char * {\i buffer}, const unsigned int {\i size})}}
\par
{\bkmkstart AAAAAAAABE}
{\bkmkend AAAAAAAABE}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 173                                                                            \{\par
174 \par
175     int sentBytes = 0;\par
176     int writeBytes = 0;\par
177     \par
178     while((writeBytes = write(socket,buffer+sentBytes,size-sentBytes)) > 0) \{\par
179         sentBytes += writeBytes;\par
180     \}\par
181     \par
182     debug(4,"Se enviaron %i Byte\\n",sentBytes);\par
183     \par
184     return sentBytes;\par
185 \}}
}
{\xe \v waitConnection4\:tcp.c}
{\xe \v tcp.c\:waitConnection4}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int waitConnection4 (int {\i socket}, char * {\i clientIP}, unsigned int * {\i clientPort})}}
\par
{\bkmkstart AAAAAAAABF}
{\bkmkend AAAAAAAABF}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 98                                                                           \{\par
99     int client;\par
100     struct sockaddr_in addrClient;\par
101     socklen_t addrLen;\par
102     char ip[INET_ADDRSTRLEN]=\{0\};\par
103     int localerror;\par
104     \par
105     addrLen = sizeof(addrClient);\par
106     \par
107     bzero(&addrClient, sizeof(addrClient));\par
108     client = accept(socket, (struct sockaddr *)&addrClient,&addrLen);\par
109     if(client == -1) \{\par
110         localerror = errno;\par
111         fprintf(stderr,"Can't retrive client Socket (%s)\\n",strerror(localerror));\par
112         return -1;\par
113     \}\par
114     \par
115     if(clientIP!=NULL) \{\par
116         inet_ntop(AF_INET,&(addrClient.sin_addr),ip,INET_ADDRSTRLEN);\par
117         strcpy(clientIP,ip);        \par
118     \}\par
119     \par
120     if(clientPort!=NULL) \{\par
121         *clientPort = ntohs(addrClient.sin_port);\par
122     \}\par
123     \par
124     return client;\par
125 \}\par
}
}
\par \pard\plain 

\pard\plain \sect\sbkpage
\s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
\pard\plain \s2\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid 
tcp.h File Reference\par \pard\plain 
{\tc\tcl2 \v tcp.h}
{\xe \v tcp.h}
{\bkmkstart AAAAAAAABG}
{\bkmkend AAAAAAAABG}
\par
{
{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Funciones generales para trabajar con un Socket de tipo TCP. }}\par
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Functions\par
\pard\plain 

{
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b newTCPServerSocket4} (const char *ip, const unsigned short {\b port}, const int q_size)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
void {\b closeTCPSocket} (const int socketFD)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b waitConnection4} (int socket, char *clientIP, unsigned int *clientPort)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b newTCPClientSocket4} (const char *ip, const unsigned short {\b port})\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b readTCPLine4} (const int socket, char *buffer, const unsigned int maxRead)\par
\pard\plain \s80\fi-360\li360\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\adjustright \fs20\cgrid 
int {\b sendTCPLine4} (const int socket, char *buffer, const unsigned int size)\par
}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Detailed Description\par
\pard\plain 
{
\pard\plain \s17\sa60\sb30\widctlpar\qj \fs22\cgrid {\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
Funciones generales para trabajar con un Socket de tipo TCP. \par
}{\s17\sa60\sb30\widctlpar\qj \fs22\cgrid 
\par
{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Author:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Alvaro Parres \par
}{{\s5\sb90\sa30\keepn\widctlpar\adjustright \b\f1\fs20\cgrid 
Date:\par}\pard\plain \s61\li360\widctlpar\ql\adjustright \fs20\cgrid Feb/2013 \par
}}}
{\pard\widctlpar\brdrb\brdrs\brdrw5\brsp20 \adjustright \par}
\pard\plain \s3\sb240\sa60\keepn\widctlpar\adjustright \b\f1\cgrid 
Function Documentation\par
\pard\plain 
{\xe \v closeTCPSocket\:tcp.h}
{\xe \v tcp.h\:closeTCPSocket}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
void closeTCPSocket (const int {\i socketFD})}}
\par
{\bkmkstart AAAAAAAABH}
{\bkmkend AAAAAAAABH}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 78                                         \{\par
79     close(socketFD);\par
80     debug(4,"Socket(%i) closed",socketFD);\par
81     return;\par
82 \}\par
}
}
{\xe \v newTCPClientSocket4\:tcp.h}
{\xe \v tcp.h\:newTCPClientSocket4}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int newTCPClientSocket4 (const char * {\i ip}, const unsigned short {\i port})}}
\par
{\bkmkstart AAAAAAAABI}
{\bkmkend AAAAAAAABI}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
}
{\xe \v newTCPServerSocket4\:tcp.h}
{\xe \v tcp.h\:newTCPServerSocket4}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int newTCPServerSocket4 (const char * {\i ip}, const unsigned short {\i port}, const int {\i q_size})}}
\par
{\bkmkstart AAAAAAAABJ}
{\bkmkend AAAAAAAABJ}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 27                                                                                      \{\par
28     int socketFD;\par
29     int status;\par
30     int localerror;\par
31     struct sockaddr_in addr;\par
32 \par
33     if(!buildAddr4(&addr,ip,port)) return -1;\par
34     \par
35     if((socketFD = getNewTCPSocket(PF_INET))==-1) return -1;\par
36     \par
37     status = bind(socketFD, (struct sockaddr*)&addr, sizeof(addr));\par
38     if(status != 0) \{\par
39         localerror = errno;\par
40         fprintf(stderr,"Error: Can't bind port %s:%i (%s)\\n",ip,port,strerror(localerror));\par
41         return -1;\par
42     \}\par
43     \par
44     status = listen(socketFD,q_size);\par
45     if(status != 0) \{\par
46         localerror = errno;\par
47         fprintf(stderr,"Error: Can't change socket mode to listen (%s)\\n",strerror(localerror));\par
48         return -1;\par
49     \}\par
50     \par
51     debug(4,"Socket on %s:%u created",ip,port);\par
52     \par
53     return socketFD;\par
54 \}\par
}
}
{\xe \v readTCPLine4\:tcp.h}
{\xe \v tcp.h\:readTCPLine4}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int readTCPLine4 (const int {\i socket}, char * {\i buffer}, const unsigned int {\i maxRead})}}
\par
{\bkmkstart AAAAAAAABK}
{\bkmkend AAAAAAAABK}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 149                                                                               \{\par
150     char *ptr;\par
151     int byte;\par
152     int readBytes;\par
153     \par
154     ptr = buffer;\par
155     readBytes = 0;\par
156     \par
157     while((byte = read(socket,ptr,1)) > 0) \{\par
158         if(*ptr == '\\n' || *ptr == '\\0') \{\par
159             break;\par
160         \}\par
161         \par
162         if(readBytes == maxRead) \{\par
163             break;\par
164         \}\par
165         \par
166         ptr++;\par
167         readBytes++;\par
168     \}\par
169     \par
170     return readBytes;\par
171 \}\par
}
}
{\xe \v sendTCPLine4\:tcp.h}
{\xe \v tcp.h\:sendTCPLine4}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int sendTCPLine4 (const int {\i socket}, char * {\i buffer}, const unsigned int {\i size})}}
\par
{\bkmkstart AAAAAAAABL}
{\bkmkend AAAAAAAABL}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 173                                                                            \{\par
174 \par
175     int sentBytes = 0;\par
176     int writeBytes = 0;\par
177     \par
178     while((writeBytes = write(socket,buffer+sentBytes,size-sentBytes)) > 0) \{\par
179         sentBytes += writeBytes;\par
180     \}\par
181     \par
182     debug(4,"Se enviaron %i Byte\\n",sentBytes);\par
183     \par
184     return sentBytes;\par
185 \}}
}
{\xe \v waitConnection4\:tcp.h}
{\xe \v tcp.h\:waitConnection4}
\pard\plain \s4\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs20\cgrid {
{\b 
int waitConnection4 (int {\i socket}, char * {\i clientIP}, unsigned int * {\i clientPort})}}
\par
{\bkmkstart AAAAAAAABM}
{\bkmkend AAAAAAAABM}
{
\pard\plain \s51\li360\sa60\sb30\qj\widctlpar\qj\adjustright \fs20\cgrid 
{
\pard\plain \s41\li360\widctlpar\adjustright \shading1000\cbpat8 \f2\fs16\cgrid 98                                                                           \{\par
99     int client;\par
100     struct sockaddr_in addrClient;\par
101     socklen_t addrLen;\par
102     char ip[INET_ADDRSTRLEN]=\{0\};\par
103     int localerror;\par
104     \par
105     addrLen = sizeof(addrClient);\par
106     \par
107     bzero(&addrClient, sizeof(addrClient));\par
108     client = accept(socket, (struct sockaddr *)&addrClient,&addrLen);\par
109     if(client == -1) \{\par
110         localerror = errno;\par
111         fprintf(stderr,"Can't retrive client Socket (%s)\\n",strerror(localerror));\par
112         return -1;\par
113     \}\par
114     \par
115     if(clientIP!=NULL) \{\par
116         inet_ntop(AF_INET,&(addrClient.sin_addr),ip,INET_ADDRSTRLEN);\par
117         strcpy(clientIP,ip);        \par
118     \}\par
119     \par
120     if(clientPort!=NULL) \{\par
121         *clientPort = ntohs(addrClient.sin_port);\par
122     \}\par
123     \par
124     return client;\par
125 \}\par
}
}

\pard\plain \sect\sbkpage
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid 
\s1\sb240\sa60\keepn\widctlpar\adjustright \b\f1\fs36\kerning36\cgrid Index\par 
\pard\plain 
{\tc \v Index}
{\field\fldedit {\*\fldinst INDEX \\c2 \\*MERGEFORMAT}{\fldrslt INDEX}}
}